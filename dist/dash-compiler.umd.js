(function(e,o){typeof exports=="object"&&typeof module!="undefined"?o(exports,require("mc-project-core"),require("path-browserify")):typeof define=="function"&&define.amd?define(["exports","mc-project-core","path-browserify"],o):(e=typeof globalThis!="undefined"?globalThis:e||self,o(e.DashCompiler={},e.mcProjectCore,e.pathBrowserify))})(this,function(e,o,c){"use strict";class h extends o.ProjectConfig{constructor(i,t){super(c.dirname(t));this.fileSystem=i,this.configPath=t}readConfig(){return this.fileSystem.readJson(this.configPath)}writeConfig(i){return this.fileSystem.writeJson(this.configPath,i)}}class d{constructor(i){this.dash=i,this.plugins=[]}loadPlugins(i){var s,a;const t=(a=(s=this.dash.projectConfig.get().compiler)==null?void 0:s.plugins)!=null?a:[],n={};for(const r in i){const u=t.find(f=>typeof f=="string"?f===r:f[0]===r);u&&(n[i[r]]=typeof u=="string"?{}:u[1])}}async runBuildStartHooks(){for(const i of this.plugins)await i.runBuildStartHook()}async runIncludeHooks(){let i=[];for(const t of this.plugins){const n=await t.runIncludeHook();Array.isArray(n)&&i.push(...n)}return i}async runTransformPathHooks(i){let t=i;for(const n of this.plugins){const s=n.runTransformPathHook(t);if(s===null)return null;s!==void 0&&(t=s)}}async runBuildEndHooks(){for(const i of this.plugins)await i.runBuildEndHook()}}class p{constructor(i){this.dash=i,this.files=[]}all(){return this.files}filtered(i){return this.files.filter(i)}async loadAll(){const i=new Set,t=this.dash.projectConfig.getAvailablePackPaths();for(const s of t){const a=await this.dash.fileSystem.allFiles(s);for(const r of a)i.add(c.join(s,r))}const n=await this.dash.plugins.runIncludeHooks();for(const s of n)i.add(s);this.files=Array.from(i)}}class g{constructor(i,t){this.fileSystem=i,this.options=t,this.plugins=new d(this),this.includedFiles=new p(this),this.projectRoot=c.dirname(t.config),this.projectConfig=new h(i,t.config)}async setup(){await this.projectConfig.setup()}get isCompilerActivated(){var i;return!!this.projectConfig.get().compiler||!Array.isArray((i=this.projectConfig.get().compiler)==null?void 0:i.plugins)}async build(){!this.isCompilerActivated||(await this.plugins.runBuildStartHooks(),await this.includedFiles.loadAll(),await this.plugins.runBuildEndHooks())}watch(){}}class y{async writeJson(i,t,n=!0){await this.writeFile(i,JSON.stringify(t,null,n?"	":0))}async readJson(i){return JSON.parse(await this.readFile(i).then(t=>t.text()))}watchDirectory(i,t){console.warn("Watching a directory for changes is not supported on this platform!")}}e.Dash=g,e.FileSystem=y,Object.defineProperty(e,"__esModule",{value:!0}),e[Symbol.toStringTag]="Module"});
